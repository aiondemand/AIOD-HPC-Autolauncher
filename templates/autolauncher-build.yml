variables:
    LAUNCH_TARGET_FOLDER: /gpfs/projects/bsc70/hpai/storage/data/tests/
    LAUNCH_IMAGE_NAME: ${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}
    LAUNCH_CONFIG_PATH: configs/config.json
    EXEC_HOSTS_FILE: some_file
    SINGULARITY_IMAGE: quay.io/singularity/singularity:v3.11.5-slim 
    LAUNCH_VERSION: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME} # qi
    TAGS: estufa # mininostrum, estufa or pepino

build:
  image: ci.atalaya.at/containers/docker:stable
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    - export LAUNCH_IMAGE_NAME=$(env LAUNCH_IMAGE_NAME=${LAUNCH_IMAGE_NAME} bash -c 'echo ${LAUNCH_IMAGE_NAME,,}')
    - >-
      echo -e "[global]\ntimeout = 60\nindex-url = https://pypi.org/simple\ntrusted-host = pypi.org\n               hpai.bsc.es\nextra-index-url = https://${pypi_user}:${pypi_pass}@hpai.bsc.es:11080/simple/\n" > pip.conf
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ci.atalaya.at
    - docker build -t ci.atalaya.at/${LAUNCH_IMAGE_NAME} -f containers/Dockerfile-${LAUNCH_TARGET}${DOCKERFILE_TAG} .
    - docker push ci.atalaya.at/${LAUNCH_IMAGE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_AMD.*$/
      variables:
        LAUNCH_TARGET: amd
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_MN4.*$/
      variables:
        LAUNCH_TARGET: mn4
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_LOCAL.*$/
      variables:
        LAUNCH_TARGET: local
    - when: never
  tags: 
    - ${TAGS}

build_image_mn5:
  image:
    name: ci.atalaya.at/containers/docker:stable
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash shadow
  script:
    # Step 1: Extract the .def file name from the commit title
    - export DEF_FILE=$(echo ${CI_COMMIT_TITLE} | sed -e 's/.*<\([^]]*\)>.*/\1/g')
    - echo "The .def file is $DEF_FILE"
    
    # Step 2: Prepare the working directory and copy the .def file
    - JOB_WORKDIR=${LAUNCH_TARGET_FOLDER}/${CI_PROJECT_PATH}
    - mkdir -p ${JOB_WORKDIR}/autolauncher-output
    - cp ${DEF_FILE} ${JOB_WORKDIR}
    - cd ${JOB_WORKDIR}

    # Step 3: Define the final image name based on .def file or predefined value
    - export BUILD_IMAGE_NAME="${DEF_FILE%.def}"  # Remove .def extension for image name
    - echo "The Singularity image will be named $BUILD_IMAGE_NAME"

    # Step 4: Build the Singularity image from the .def file
    - docker run --privileged --rm --entrypoint /bin/sh -v ${JOB_WORKDIR}:/mnt ${SINGULARITY_IMAGE} singularity build --writable /mnt/${BUILD_IMAGE_NAME}.sif /mnt/${DEF_FILE}

    # Step 5: Verify the image was created
    - if [ -f ${BUILD_IMAGE_NAME}.sif ]; then echo "Image created successfully"; else echo "Image creation failed"; exit 1; fi

    # Step 6: Convert the Singularity image to Docker format and push it to Docker registry
    - singularity build docker-daemon://${BUILD_IMAGE_NAME}:latest ${BUILD_IMAGE_NAME}.sif
    - docker push ${DOCKER_REGISTRY}/${BUILD_IMAGE_NAME}:latest
  artifacts:
    paths:
      - autolauncher-output/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TITLE =~ /^BUILD_IMAGE_MN5.*$/
    - when: never
  tags:
    - estufa
