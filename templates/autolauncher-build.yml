variables:
    LAUNCH_TARGET_FOLDER: /gpfs/projects/bsc70/hpai/storage/data/tests/
    LAUNCH_IMAGE_NAME: ${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}
    LAUNCH_CONFIG_PATH: configs/config.json
    EXEC_HOSTS_FILE: some_file
    SINGULARITY_IMAGE: quay.io/singularity/singularity:v3.11.5-slim 
    REQUIREMT_FILE: requirements.txt
    LAUNCH_VERSION: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME} # qi
    TAGS: estufa # mininostrum, estufa or pepino

build:
  image: ci.atalaya.at/containers/docker:stable
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    - export LAUNCH_IMAGE_NAME=$(env LAUNCH_IMAGE_NAME=${LAUNCH_IMAGE_NAME} bash -c 'echo ${LAUNCH_IMAGE_NAME,,}')
    - >-
      echo -e "[global]\ntimeout = 60\nindex-url = https://pypi.org/simple\ntrusted-host = pypi.org\n               hpai.bsc.es\nextra-index-url = https://${pypi_user}:${pypi_pass}@hpai.bsc.es:11080/simple/\n" > pip.conf
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ci.atalaya.at
    - docker build -t ci.atalaya.at/${LAUNCH_IMAGE_NAME} -f containers/Dockerfile-${LAUNCH_TARGET}${DOCKERFILE_TAG} .
    - docker push ci.atalaya.at/${LAUNCH_IMAGE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_AMD.*$/
      variables:
        LAUNCH_TARGET: amd
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_MN4.*$/
      variables:
        LAUNCH_TARGET: mn4
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_LOCAL.*$/
      variables:
        LAUNCH_TARGET: local
    - when: never
  tags: 
    - ${TAGS}

build_image_mn5:
  # Usamos la imagen de Singularity como base
  image: ci.atalaya.at/containers/docker:stable
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    # Step 1: extract the image name from the commit title
    - export BUILD_IMAGE_NAME=$(echo ${CI_COMMIT_TITLE} | sed -e 's/.*<\([^]]*\)>.*/\1/g')
    - echo "The new image is $BUILD_IMAGE_NAME"

    # Step 2: Remove namespace project path from string
    - BUILDING_IMAGE_NAME=${LAUNCH_IMAGE_NAME#"$CI_PROJECT_NAMESPACE/"}
    
    # Step 3: Prepare the working directory
    - JOB_WORKDIR=${LAUNCH_TARGET_FOLDER}/${CI_PROJECT_PATH}
    - | 
        mkdir -p ${JOB_WORKDIR}/autolauncher-output
        cp ${REQUIREMT_FILE} ${JOB_WORKDIR}/autolauncher-output
        cd ${JOB_WORKDIR}/autolauncher-output
    
    # Step 4: do the pull of the image on the host if not exists
    - docker run --privileged ${SINGULARITY_IMAGE} singularity pull docker://${BUILD_IMAGE_NAME}

    # Step 5: Build the sandbox image
    - docker run --privileged --volume ${JOB_WORKDIR}/${BUILDING_IMAGE_NAME}:/mnt ${SINGULARITY_IMAGE} singularity build --force --sandbox /mnt docker://${BUILD_IMAGE_NAME}

    # step 6: copy the requirement file to the singularity sandbox
    - cp ${REQUIREMT_FILE} ${JOB_WORKDIR}/${BUILDING_IMAGE_NAME}/tmp/$REQUIREMT_FILE

    # Step 5: Build the singularity image using the docker image using impesonation docker call
    - docker run --privileged --volume ${JOB_WORKDIR}/${BUILDING_IMAGE_NAME}:/mnt ${SINGULARITY_IMAGE}  singularity exec --writable --nv /mnt /bin/sh -c "pip install -r /tmp/$REQUIREMT_FILE"
  artifacts:
    paths:
      - autolauncher-output/output
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TITLE =~ /^BUILD_IMAGE_MN5.*$/
    - when: never
  tags:
    - estufa