variables:
    LAUNCH_TARGET_FOLDER: /gpfs/projects/bsc70/hpai/storage/data/tests/
    LAUNCH_IMAGE_NAME: ${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}
    LAUNCH_CONFIG_PATH: configs/config.json
    EXEC_HOSTS_FILE: some_file
    SINGULARITY_IMAGE: quay.io/singularity/singularity:v3.11.5-slim 
    LAUNCH_VERSION: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME} # qi
    TAGS: estufa # mininostrum, estufa or pepino

build:
  image: ci.atalaya.at/containers/docker:stable
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    - export LAUNCH_IMAGE_NAME=$(env LAUNCH_IMAGE_NAME=${LAUNCH_IMAGE_NAME} bash -c 'echo ${LAUNCH_IMAGE_NAME,,}')
    - >-
      echo -e "[global]\ntimeout = 60\nindex-url = https://pypi.org/simple\ntrusted-host = pypi.org\n               hpai.bsc.es\nextra-index-url = https://${pypi_user}:${pypi_pass}@hpai.bsc.es:11080/simple/\n" > pip.conf
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ci.atalaya.at
    - docker build -t ci.atalaya.at/${LAUNCH_IMAGE_NAME} -f containers/Dockerfile-${LAUNCH_TARGET}${DOCKERFILE_TAG} .
    - docker push ci.atalaya.at/${LAUNCH_IMAGE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_AMD.*$/
      variables:
        LAUNCH_TARGET: amd
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_MN4.*$/
      variables:
        LAUNCH_TARGET: mn4
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_LOCAL.*$/
      variables:
        LAUNCH_TARGET: local
    - when: never
  tags: 
    - ${TAGS}


build_image_mn5:
  image:
    name: ci.atalaya.at/containers/docker:stable
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash shadow openssh rsync
  script:
    # Step 1: Extract the .def file name from the commit title
    - export LAUNCH_IMAGE_NAME=$(env LAUNCH_IMAGE_NAME=${LAUNCH_IMAGE_NAME} bash -c 'echo ${LAUNCH_IMAGE_NAME,,}')
    - export DEF_FILE=$(echo ${CI_COMMIT_TITLE} | sed -e 's/.*<\([^]]*\)>.*/\1/g')
    - echo "The .def file is $DEF_FILE"

    # Step 2: Connect to OpenStack copy the ssh key from secrets, decode key and do the ssh connection
    - JOB_WORKDIR=${LAUNCH_TARGET_FOLDER}/${CI_PROJECT_PATH}
    - mkdir -p ~/.ssh/
    - chmod 0700 ~/.ssh
    - echo ${OPENSTACK_KEY} | base64 -d > ~/.ssh/ssh-key
    - chmod 0600 ~/.ssh/ssh-key
    - ssh-keyscan ${OPENSTACK_USER}@${OPENSTACK_HOST} >/dev/null 2>&1 # Checks if remote SSH is accessible
    
    # Step 3: Prepare the working on remote directory and copy the .def file
    - export OPENSTACK_USER="${OPENSTACK_USER//_/}"
    - ssh -vvv -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "ls ${JOB_WORKDIR}"
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "mkdir -p ${JOB_WORKDIR}/autolauncher-output"
    - scp -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${DEF_FILE} ${OPENSTACK_USER}@${OPENSTACK_HOST}:${JOB_WORKDIR}/

    # Step 4: Define the final image name based on .def file or predefined value
    - export BUILD_IMAGE_NAME="${LAUNCH_IMAGE_NAME}"
    - echo "The Singularity image will be named $BUILD_IMAGE_NAME"

    # Step 5: Build the Singularity image from the .def file and save output logs
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "singularity build ${JOB_WORKDIR}/${BUILD_IMAGE_NAME}.sif ${JOB_WORKDIR}/${DEF_FILE} > ${JOB_WORKDIR}/autolauncher-output/build_output.log 2> ${JOB_WORKDIR}/autolauncher-output/build_error.log"

    # Step 6: Extract pip freeze from the Singularity image environment
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "singularity exec /data/${BUILD_IMAGE_NAME}.sif pip freeze > ${JOB_WORKDIR}/autolauncher-output/pip_freeze.txt 2>&1"

    # Step 7: Verify the image was created and log the contents of /data again
    - docker exec aux_runner_${CI_COMMIT_SHORT_SHA} ls -la /data/ > ${JOB_WORKDIR}/autolauncher-output/ls_output.log 2>&1

    # Step 8: copy artifacts from remote
    - mkdir -p autolauncher-output
    - scp -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa ${OPENSTACK_USER}@${OPENSTACK_HOST}:${JOB_WORKDIR}/autolauncher-output/* autolauncher-output/
  artifacts:
    paths:
      - autolauncher-output/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TITLE =~ /^BUILD_IMAGE_MN5.*$/
    - when: never
  tags:
    - estufa
