variables:
    LAUNCH_TARGET_HOSTNAME: amdlogin.bsc.es
    LAUNCH_TARGET_USERNAME: hpai
    LAUNCH_TARGET_FOLDER: /gpfs/projects/bsc70/hpai/storage/data/tests/
    LAUNCH_TARGET_SSH_KEY: some_file
    LAUNCH_TARGET_SRC_DIR: src/
    LAUNCH_IMAGE_NAME: ${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}
    LAUNCH_CONFIG_PATH: configs/config.json
    KNOWN_HOSTS_FILE: some_file
    SINGULARITY_VERSION: 3.6.4
    LAUNCH_VERSION: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}
    BUILD_IMAGE_NAME: nvcr.io/nvidia/pytorch:24.02-py3
    TAGS: estufa # mininostrum, estufa or pepino

build:
  image: ci.atalaya.at/containers/docker:stable
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    - export LAUNCH_IMAGE_NAME=$(env LAUNCH_IMAGE_NAME=${LAUNCH_IMAGE_NAME} bash -c 'echo ${LAUNCH_IMAGE_NAME,,}')
    - >-
      echo -e "[global]\ntimeout = 60\nindex-url = https://pypi.org/simple\ntrusted-host = pypi.org\n               hpai.bsc.es\nextra-index-url = https://${pypi_user}:${pypi_pass}@hpai.bsc.es:11080/simple/\n" > pip.conf
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ci.atalaya.at
    - docker build -t ci.atalaya.at/${LAUNCH_IMAGE_NAME} -f containers/Dockerfile-${LAUNCH_TARGET}${DOCKERFILE_TAG} .
    - docker push ci.atalaya.at/${LAUNCH_IMAGE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_AMD.*$/
      variables:
        LAUNCH_TARGET: amd
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_MN4.*$/
      variables:
        LAUNCH_TARGET: mn4
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_LOCAL.*$/
      variables:
        LAUNCH_TARGET: local
    - when: never
  tags: 
    - ${TAGS}


build_image_mn5:
  image: ci.atalaya.at/containers/docker:stable  # Stable base image
  stage: build_image_mn5  # New stage for building Singularity image
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    # Step 0: prepare the environment
    - apk add bash openssh-client rsync git  # Install necessary packages
    - mkdir -p ~/.ssh/
    - echo cp ${KNOWN_HOSTS_FILE} ~/.ssh/known_hosts
    - cp ${LAUNCH_TARGET_SSH_KEY} ~/.ssh/ssh-key
    - chmod 0600 ~/.ssh/ssh-key
    - md5sum ~/.ssh/ssh-key  # Check SSH key integrity

    # Step 1: Set up variables and SSH connection
    - export BUILD_IMAGE_NAME=$(echo "$CI_COMMIT_MESSAGE" | grep -oE '--image=[^ ]+' | cut -d'=' -f2)
    - 'echo "The new image is: $BUILD_IMAGE_NAME"'
    
    # Step 2: Connect to the remote server and prepare the environment
    - ssh -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME} "mkdir -p ${LAUNCH_TARGET_FOLDER}/containers/${LAUNCH_VERSION}/"
    
    # Step 3: Pull the Docker image on the remote server
    - ssh -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME} "docker pull ${BUILD_IMAGE_NAME}"

    # Step 4: Build the Singularity image in sandbox mode
    - ssh -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME} "singularity build --sandbox ${LAUNCH_TARGET_FOLDER}/singdir docker://${BUILD_IMAGE_NAME}"

    # Step 5: Enter the Singularity sandbox and launch a writable shell
    - ssh -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME} "cd ${LAUNCH_TARGET_FOLDER}/singdir && singularity shell --writable --nv ."

    # Step 6: Run the image.sh script inside the Singularity sandbox
    - scp -i ~/.ssh/ssh-key image.sh ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME}:${LAUNCH_TARGET_FOLDER}/singdir/image.sh
    - ssh -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME} "cd ${LAUNCH_TARGET_FOLDER}/singdir && bash image.sh"
    
    # Step 7: Save logs on the remote server
    - ssh -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME} "singularity exec ${LAUNCH_TARGET_FOLDER}/singdir pip freeze > pip_freeze.txt"
    - ssh -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME} "singularity exec ${LAUNCH_TARGET_FOLDER}/singdir dpkg -l > installed_packages.txt"
    - ssh -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME} "mkdir -p ${LAUNCH_TARGET_FOLDER}/logs && cp pip_freeze.txt installed_packages.txt ${LAUNCH_TARGET_FOLDER}/logs/"
    
  after_script:
    # Fetch logs and artifacts from the remote server
    - scp -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME}:${LAUNCH_TARGET_FOLDER}/logs/pip_freeze.txt logs/
    - scp -i ~/.ssh/ssh-key ${LAUNCH_TARGET_USERNAME}@${LAUNCH_TARGET_HOSTNAME}:${LAUNCH_TARGET_FOLDER}/logs/installed_packages.txt logs/
  artifacts:
    paths:
      - logs/
    expire_in: 1 week  # Keep the artifacts for one week
  rules:
    - if: $CI_COMMIT_TITLE =~ /^BUILD_MN5.*$/
      variables:
        LAUNCH_TARGET: mn5
  tags:
    - ${TAGS}