variables:
    LAUNCH_TARGET_HOSTNAME: amdlogin.bsc.es
    LAUNCH_TARGET_FOLDER: /gpfs/projects/bsc70/hpai/storage/data/tests/
    LAUNCH_IMAGE_NAME: ${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}
    LAUNCH_CONFIG_PATH: configs/config.json
    LAUNCH_VERSION: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME} # qi
    BUILD_IMAGE_NAME: nvcr.io/nvidia/pytorch:24.02-py3
    TAGS: estufa # mininostrum, estufa or pepino

build:
  image: ci.atalaya.at/containers/docker:stable
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    - export LAUNCH_IMAGE_NAME=$(env LAUNCH_IMAGE_NAME=${LAUNCH_IMAGE_NAME} bash -c 'echo ${LAUNCH_IMAGE_NAME,,}')
    - >-
      echo -e "[global]\ntimeout = 60\nindex-url = https://pypi.org/simple\ntrusted-host = pypi.org\n               hpai.bsc.es\nextra-index-url = https://${pypi_user}:${pypi_pass}@hpai.bsc.es:11080/simple/\n" > pip.conf
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ci.atalaya.at
    - docker build -t ci.atalaya.at/${LAUNCH_IMAGE_NAME} -f containers/Dockerfile-${LAUNCH_TARGET}${DOCKERFILE_TAG} .
    - docker push ci.atalaya.at/${LAUNCH_IMAGE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_AMD.*$/
      variables:
        LAUNCH_TARGET: amd
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_MN4.*$/
      variables:
        LAUNCH_TARGET: mn4
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_LOCAL.*$/
      variables:
        LAUNCH_TARGET: local
    - when: never
  tags: 
    - ${TAGS}


build_image_mn5:
  # Stable base image
  image: ci.atalaya.at/containers/singularity:v3.6.4-slim
  # New stage for building Singularity image on build stage
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    # Step 1: Set up variables and SSH connection
    - export BUILD_IMAGE_NAME=$(echo ${CI_COMMIT_TITLE} | sed -e 's/.*<\([^]]*\)>.*/\1/g')
    - 'echo "The new image is: $BUILD_IMAGE_NAME"'
    
    # Step 2: prepare the environment
    - JOB_WORKDIR=${LAUNCH_TARGET_FOLDER}/${CI_COMMIT_SHORT_SHA}

    # Step 2: prepare the environment
    - mkdir -p ${JOB_WORKDIR}/ && cd ${JOB_WORKDIR}/"
    
    # Step 3: Pull the Docker image on the remote server
    - docker pull ${BUILD_IMAGE_NAME}"

    # Step 4: Build the Singularity image in sandbox mode
    - singularity build --sandbox ${JOB_WORKDIR}/${BUILD_IMAGE_NAME} docker://${BUILD_IMAGE_NAME}"

    # Step 5: Save logs on the remote server
    - singularity exec ${JOB_WORKDIR}/${BUILD_IMAGE_NAME} dpkg -l > installed_packages.txt"
    - mkdir -p ${JOB_WORKDIR}/logs && cp installed_packages.txt ${JOB_WORKDIR}/logs/"
  after_script:
    # Fetch logs and artifacts from the remote server
    - ${JOB_WORKDIR}/logs/pip_freeze.txt logs/
    - ${JOB_WORKDIR}/logs/installed_packages.txt logs/
  artifacts:
    paths:
      - logs/
    expire_in: 1 week  # Keep the artifacts for one week
  rules:
    - if: $CI_COMMIT_TITLE =~ /^BUILD_IMAGE_MN5.*$/
    - when: never
  tags:
    - estufa


update_image_mn5:
  # Stable singularity base image
  image: ci.atalaya.at/containers/singularity:v3.6.4-slim
  ## New stage for Update Singularity image on build stage
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    # Step 1: Set up variables and SSH connection
    - export BUILD_IMAGE_NAME=$(echo ${CI_COMMIT_TITLE} | sed -e 's/.*<\([^]]*\)>.*/\1/g')
    - 'echo "The new image is: $BUILD_IMAGE_NAME"'
    
    # Step 2: Connect to the remote server and prepare the environment
    - mkdir -p ${LAUNCH_TARGET_FOLDER}/containers/${LAUNCH_VERSION}/"
    
    # Step 3: Pull the Docker image on the remote server
    - docker pull ${BUILD_IMAGE_NAME}"

    # Step 4: Build the Singularity image in sandbox mode
    - singularity build --sandbox ${LAUNCH_TARGET_FOLDER}/singdir docker://${BUILD_IMAGE_NAME}"

    # Step 5: Enter the Singularity sandbox and launch a writable shell
    - cd ${LAUNCH_TARGET_FOLDER}/singdir && singularity shell --writable --nv ."

    # Step 6: Run the image.sh script inside the Singularity sandbox
    - cp ${LAUNCH_TARGET_FOLDER}/singdir/image.sh
    - scd ${LAUNCH_TARGET_FOLDER}/singdir && bash image.sh" # tiempo de ejecucion del sanbox"
    
    # Step 7: Save logs on the remote server
    - singularity exec ${LAUNCH_TARGET_FOLDER}/singdir pip freeze > pip_freeze.txt"
    - singularity exec ${LAUNCH_TARGET_FOLDER}/singdir dpkg -l > installed_packages.txt"
    - mkdir -p ${LAUNCH_TARGET_FOLDER}/logs && cp pip_freeze.txt installed_packages.txt ${LAUNCH_TARGET_FOLDER}/logs/"
  after_script:
    # Fetch logs and artifacts from the remote server
    - ${LAUNCH_TARGET_FOLDER}/logs/pip_freeze.txt logs/
    - ${LAUNCH_TARGET_FOLDER}/logs/installed_packages.txt logs/
  artifacts:
    paths:
      - logs/
    expire_in: 1 week  # Keep the artifacts for one week
  rules:
    - if: $CI_COMMIT_TITLE =~ /^UPDATE_IMAGE_MN5.*$/
      variables:
        LAUNCH_TARGET: mn5
  tags:
    - estufa