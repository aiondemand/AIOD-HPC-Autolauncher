variables:
    LAUNCH_IMAGE_NAME: ${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME}
    LAUNCH_CONFIG_PATH: configs/config.json
    OUTPUT_FOLDER: /gpfs/projects/bsc70/hpai/storage/data/images
    EXEC_HOSTS_FILE: some_file
    SINGULARITY_IMAGE: quay.io/singularity/singularity:v3.11.5-slim 
    LAUNCH_VERSION: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_NAME} # qi
    TAGS: estufa # mininostrum, estufa or pepino

build:
  image: ci.atalaya.at/containers/docker:stable
  stage: build
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - time apk add bash
  script:
    - export LAUNCH_IMAGE_NAME=$(env LAUNCH_IMAGE_NAME=${LAUNCH_IMAGE_NAME} bash -c 'echo ${LAUNCH_IMAGE_NAME,,}')
    - >-
      echo -e "[global]\ntimeout = 60\nindex-url = https://pypi.org/simple\ntrusted-host = pypi.org\n               hpai.bsc.es\nextra-index-url = https://${pypi_user}:${pypi_pass}@hpai.bsc.es:11080/simple/\n" > pip.conf
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ci.atalaya.at
    - docker build -t ci.atalaya.at/${LAUNCH_IMAGE_NAME} -f containers/Dockerfile-${LAUNCH_TARGET}${DOCKERFILE_TAG} .
    - docker push ci.atalaya.at/${LAUNCH_IMAGE_NAME}
  rules:
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_AMD.*$/
      variables:
        LAUNCH_TARGET: amd
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_MN4.*$/
      variables:
        LAUNCH_TARGET: mn4
    - if: $CI_COMMIT_TITLE =~ /^LAUNCH_LOCAL.*$/
      variables:
        LAUNCH_TARGET: local
    - when: never
  tags: 
    - ${TAGS}


build_image_mn5:
  image:
    name: ci.atalaya.at/containers/docker:stable
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --update curl bash openssh rsync shadow && rm -rf /var/cache/apk/*
    - export OPENSTACK_USER="ubuntu"
    - export OPENSTACK_HOST="212.128.226.38"
  script:
    # Extract the .def file name from the commit title
    - export DEF_FILE=$(echo "${CI_COMMIT_TITLE}" | sed -e 's/.*<\([^]]*\)>.*/\1/g')
    - echo "The .def file is $DEF_FILE"

    # Connect to OpenStack copy the ssh key from secrets, decode key and do the ssh connection
    - mkdir -p ~/.ssh/ && chmod 0700 ~/.ssh
    - echo ${OPENSTACK_KEY} | base64 -d > ~/.ssh/ssh-key
    - chmod 0600 ~/.ssh/ssh-key
    - ssh-keygen -f ~/.ssh/ssh-key -p
    
    # Set-up names
    - export USERNAME="${CI_PROJECT_PATH%/*}"
    - export SHORT_SHA="${CI_COMMIT_SHORT_SHA}"
    - export REPO_NAME="${CI_PROJECT_PATH##*/}"
    - export REMOTE_DEF_PATH="/tmp/$(basename ${DEF_FILE})"
    - export FINAL_DIR="/mnt/diskS/autolauncher/${REPO_NAME}"
    - export FINAL_IMAGE_PATH="${FINAL_DIR}/${CI_COMMIT_SHA}.sif"
    - export REMOTE_OUTPUT_PATH="${OUTPUT_FOLDER}/${USERNAME}/${REPO_NAME}/${SHORT_SHA}"
    - echo "Image will be saved to $REMOTE_OUTPUT_PATH"

    # Set-up directories (cache, tmp and folder where the image will be created /mnt/diskS/<repo_name>/<commid_id>.sif)
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "sudo mkdir -p ${FINAL_DIR} /mnt/diskS/.cache /mnt/diskS/.temp && sudo chmod 777 ${FINAL_DIR}"

    # Send .def file
    - scp -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${DEF_FILE} ${OPENSTACK_USER}@${OPENSTACK_HOST}:${REMOTE_DEF_PATH}

    # Build
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "
        sudo -E PIP_CACHE_DIR='/mnt/diskS/.temp' SINGULARITY_TMPDIR='/mnt/diskS/.temp' SINGULARITY_CACHEDIR='/mnt/diskS/.cache' \
        singularity build ${FINAL_IMAGE_PATH} ${REMOTE_DEF_PATH} 2>&1 | tee ${FINAL_DIR}/build.log \
      "

    # Artifacts
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "sudo singularity exec ${FINAL_IMAGE_PATH} pip3 freeze > ${FINAL_DIR}/pip_freeze.txt 2>&1 || echo 'pip3 not found inside image'"
    - mkdir -p autolauncher-output/
    - scp -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST}:${FINAL_DIR}/build.log autolauncher-output/
    - scp -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST}:${FINAL_DIR}/pip_freeze.txt autolauncher-output/

    # Send image to GPFS
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/ssh-key ${OPENSTACK_USER}@${OPENSTACK_HOST} "
        sudo mkdir -p ${REMOTE_OUTPUT_PATH} &&
        sudo mv ${FINAL_IMAGE_PATH} ${REMOTE_OUTPUT_PATH}/ &&
        sudo mv ${FINAL_DIR}/build.log ${REMOTE_OUTPUT_PATH}/ &&
        sudo mv ${FINAL_DIR}/pip_freeze.txt ${REMOTE_OUTPUT_PATH}/
      "
  artifacts:
    paths:
        - autolauncher-output/
    expire_in: never # permanent
  rules:
    - if: $CI_COMMIT_TITLE =~ /^BUILD_IMAGE_MN5.*$/
    - when: never
  tags:
    - estufa
